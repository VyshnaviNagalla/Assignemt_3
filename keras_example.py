# -*- coding: utf-8 -*-
"""Keras_Example.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XnQ2X9VcdaHEBkrDnRsZ1zjqYdIo291_
"""

from google.colab import drive
drive.mount('/content/gdrive')

path_to_csv = '/content/gdrive/MyDrive/NNDL/NN&DeepLearning_Lesson7_SourceCode/diabetes.csv'

"""# New Section"""

import keras
import pandas
from keras.models import Sequential
from keras.layers import Dense, Activation

# load dataset
from sklearn.model_selection import train_test_split
import pandas as pd
import numpy as np

dataset = pd.read_csv(path_to_csv, header=None).values

X_train, X_test, Y_train, Y_test = train_test_split(dataset[:,0:8], dataset[:,8],
                                                    test_size=0.25, random_state=87)
np.random.seed(155)
my_first_nn = Sequential() # create model
my_first_nn.add(Dense(20, input_dim=8, activation='relu')) # hidden layer
my_first_nn.add(Dense(1, activation='sigmoid')) # output layer
my_first_nn.compile(loss='binary_crossentropy', optimizer='adam', metrics=['acc'])
my_first_nn_fitted = my_first_nn.fit(X_train, Y_train, epochs=100,
                                     initial_epoch=0)
print(my_first_nn.summary())
print(my_first_nn.evaluate(X_test, Y_test))

path_to_csv = '/content/gdrive/MyDrive/NNDL/NN&DeepLearning_Lesson7_SourceCode/breastcancer.csv'

import keras
import pandas
from keras.models import Sequential
from keras.layers import Dense, Activation
from sklearn.datasets import load_breast_cancer
# load dataset
from sklearn.model_selection import train_test_split
import pandas as pd
import numpy as np

cancer_data = load_breast_cancer()

X_train, X_test, Y_train, Y_test = train_test_split(dataset[:,0:8], dataset[:,8],
                                                    test_size=0.25, random_state=87)
np.random.seed(155)
my_first_nn = Sequential() # create model
my_first_nn.add(Dense(20, input_dim=8, activation='relu')) # hidden layer
my_first_nn.add(Dense(1, activation='sigmoid')) # output layer
my_first_nn.compile(loss='binary_crossentropy', optimizer='adam', metrics=['acc'])
my_first_nn_fitted = my_first_nn.fit(X_train, Y_train, epochs=100,
                                     initial_epoch=0)
print(my_first_nn.summary())
print(my_first_nn.evaluate(X_test, Y_test))